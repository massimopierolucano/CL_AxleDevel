<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="Main" Id="{b2f2a346-2aab-4873-ae80-3f4daff09e02}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM Main
VAR
 	stm	: UINT := 10;//10;
  stIRL : ST_LineReference;
  bMCRun, bFW, bBW,bPower,bReset,bResetDone,bError,bBusy,bPowerStatus : BOOL := FALSE;
  errId : UDINT;
  
  fbPower : MC_Power;
  fbReset : MC_Reset;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[G.AxisLine1Front(); 
G.AxisLine2Front();
G.AxisLine1Back();
G.AxisLine2Back();
G.AxisMaster();

IF bMCRun THEN
fbPower(
	Axis:= G.stAX.Line1Front, 
	Enable:= bPower, 
	Enable_Positive:= bPower, 
	Enable_Negative:= bPower, 
	Override:= 100.0, 
  Status=>bPowerStatus,
	Busy=>bBusy , 
	Error=>bError, 
	ErrorID=> errId);

fbReset(
	Axis:= G.stAX.Line1Front, 
	Execute:= bReset, 
	Done=> bResetDone,
	Busy=> bBusy, 
	Error=>bError, 
	ErrorID=>errId);
END_IF
 
CASE stm OF 
  1:
		bPower := TRUE;
    bMCRun := TRUE;
		stm := 2;
	2:
		IF G.stAX.Line1Front.Status.Error THEN //really at the level of NC
			stm := 3;
		ELSE
			stm := 5;
		END_IF
	3:
		bReset := TRUE;
		stm := 4;	
	4:
		IF bResetDone THEN
			bReset := FALSE;
			stm := 5;
		END_IF
	5:
    bPowerStatus := fbPower.Status;
		IF bPowerStatus THEN
			stm := 6;
		END_IF
  6:
    stm := 6;
  
  10:
    stIRL.nThis := 0;
    stIRL.nFixedID := 1;
    //G.AxisLine1Front.Init(stIRL := stIRL, stAxisMotor_R := G.stAX.Line1Front, stAxisMaster_R := G.stAX.Master);
    //G.AxisMaster.Init(stIRL := stIRL, stAxisMotor_R := G.stAX.Master, stAxisMaster_R := G.stAX.Master);
    
    G.AxisLine1Front.Init(stIrrLine := stIRL, stAxisMotor_R := ADR(G.stAX.Line1Front), stAxisMaster_R := ADR(G.stAX.Master));
    G.AxisLine2Front.Init(stIrrLine := stIRL, stAxisMotor_R := ADR(G.stAX.Line2Front), stAxisMaster_R := ADR(G.stAX.Master));
    G.AxisLine1Back.Init(stIrrLine := stIRL, stAxisMotor_R := ADR(G.stAX.Line1Back), stAxisMaster_R := ADR(G.stAX.Master));
    G.AxisLine2Back.Init(stIrrLine := stIRL, stAxisMotor_R := ADR(G.stAX.Line2Back), stAxisMaster_R := ADR(G.stAX.Master));
    G.AxisMaster.Init(stIrrLine := stIRL, stAxisMotor_R := ADR(G.stAX.Master), stAxisMaster_R := ADR(G.stAX.Master));
   stm := 1000;//100;//50;

  50:
    IF NOT G.AxisMaster.IsBusy THEN
      G.AxisMaster.RequPowerOn();
      stm := 60;
    END_IF
  60:
    IF G.AxisMaster.IsDone THEN
      stm := 70;
    END_IF
  70:
    IF NOT G.AxisMaster.IsError THEN
      stm := 100;
    ELSE
      stm := 0;
    END_IF

  100:
    IF NOT G.AxisLine1Front.IsBusy THEN
      G.AxisLine1Front.RequPowerOn();
      stm := 120;
    END_IF
  120:
    IF G.AxisLine1Front.IsDone THEN
      stm := 130;
    END_IF
  130:
    IF NOT G.AxisLine1Front.IsError THEN
      stm := 140;
      stm := 0;
    ELSE
      stm := 0;
    END_IF
 
  1000:
    IF NOT G.AxisLine1Front.IsBusy AND NOT G.AxisLine2Front.IsBusy AND NOT G.AxisLine1Back.IsBusy AND NOT G.AxisLine2Back.IsBusy AND NOT G.AxisMaster.IsBusy THEN
      G.AxisLine1Front.RequPowerOn();
      G.AxisLine2Front.RequPowerOn();
      G.AxisLine1Back.RequPowerOn();
      G.AxisLine2Back.RequPowerOn();
      G.AxisMaster.RequPowerOn();
      stm := 1120;
    END_IF
  1120:
    IF G.AxisLine1Front.IsDone AND G.AxisLine2Front.IsDone AND G.AxisLine1Back.IsDone AND G.AxisLine2Back.IsDone AND G.AxisMaster.IsDone THEN
      stm := 1130;
    END_IF
  1130:
    IF NOT G.AxisLine1Front.IsError AND NOT G.AxisLine2Front.IsError AND NOT G.AxisLine1Back.IsError AND NOT G.AxisLine2Back.IsError AND NOT G.AxisMaster.IsError THEN
      stm := 1140;
      stm := 0;
    ELSE
      stm := 0;
    END_IF

  
  140:
    IF NOT G.AxisLine1Front.IsBusy THEN
      G.AxisLine1Front.RequGearInDyn();
      stm := 150;
    END_IF
  150:
    IF G.AxisLine1Front.IsDone THEN
      stm := 160;
    END_IF
  160:
    IF NOT G.AxisLine1Front.IsError THEN
      stm := 170; 
    ELSE
      stm := 0;
    END_IF
    
  170:
    IF NOT G.AxisMaster.IsBusy THEN
      G.AxisMaster.RequJogAxisMaster();
      stm := 180;
    END_IF
  
  180:
    bFW := FALSE;
    bBW := FALSE;
    G.AxisMaster.JogExec(bExecIn := TRUE, bExecJogFWIn := bFW, bExecJogBWIn := bBW);
    stm := 180;
  
  0:; //park 
END_CASE]]></ST>
    </Implementation>
  </POU>
</TcPlcObject>